phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(25,75, length.out=20)
y = seq(0,4, length.out=20)
dmv = function(xi, yi, mu, phi){
y = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(y, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, nlevels = 30, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(25,75, length.out=50)
y = seq(0,4, length.out=50)
dmv = function(xi, yi, mu, phi){
y = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(y, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, nlevels = 30, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
colMeans(omega_draws)
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(25,75, length.out=50)
y = seq(-10,10, length.out=50)
dmv = function(xi, yi, mu, phi){
y = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(y, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, nlevels = 30, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
colMeans(omega_draws)
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(25,75, length.out=50)
y = seq(0,1, length.out=50)
dmv = function(xi, yi, mu, phi){
y = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(y, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, nlevels = 30, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
colMeans(omega_draws)
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot(omega_draws[1000, c('mux2','muy2')])
plot(omega_draws[900:1000, c('mux2','muy2')])
plot(omega_draws[900:1000, c('mux2','muy2')], xlim=c(-40, 100))
plot(omega_draws[900:1000, c('mux2','muy2')], xlim=c(40, 100))
points(omega_draws[900:1000, c('mux1','muy1')], xlim=c(40, 100))
points(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100))
points(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100), col='red')
plots(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100), col='red')
plot(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100), col='red')
plot(omega_draws[900:1000, c('mux2','muy2')], xlim=c(40, 100), ylim=c(0,7))
points(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100), col='red')
plot(x, y)
points(omega_draws[900:1000, c('mux2','muy2')], xlim=c(40, 100), ylim=c(0,7))
points(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100), col='red')
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(25,75, length.out=50)
y = seq(0,1, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, nlevels = 30, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, nlevels = 30, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)*(1-p) + dmv(x[i], y[i], mu2, phi2)*(p)
}
}
contour(x, y, density_mat, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)#*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[i], mu1, phi1)#*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(y, x, density_mat, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm(mu1 = omega_draws[1000, c('mux2','muy2')],
mu2 = omega_draws[1000, c('mux1', 'muy1')],
phi1 = omega_draws[1000, c('phix2', 'phiy2') ],
phi2 = omega_draws[1000, c('phix1', 'phiy1') ],
p = omega_draws[1000, c('p') ], add=F )
plot(x, y)
points(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100), col='red')
plot_bnorm(mu1 = omega_draws[1000, c('mux1', 'muy1')] ,
mu2 =  omega_draws[1000, c('mux2','muy2')],
phi1 = omega_draws[1000, c('phix1', 'phiy1') ] ,
phi2 = omega_draws[1000, c('phix2', 'phiy2') ],
p = omega_draws[1000, c('p') ], add=F )
points(omega_draws[900:1000, c('mux2','muy2')], xlim=c(40, 100), ylim=c(0,7))
points(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100), col='red')
plot(x, y)
points(omega_draws[900:1000, c('mux2','muy2')], xlim=c(40, 100), ylim=c(0,7))
points(omega_draws[900:1000, c('mux1','muy1')], xlim=c(0, 100), col='red')
data.grid <- expand.grid(x = seq(40, 100, length.out=100),
y = seq(0, 6, length.out=100))
q.samp <- cbind(data.grid, prob = mvtnorm::dmvnorm(data.grid,
mean = omega_draws[900:1000, c('mux2','muy2')],
sigma = omega_draws[1000, c('phix1', 'phiy1') ]))
q.samp <- cbind(data.grid, prob = mvtnorm::dmvnorm(data.grid,
mean = omega_draws[900:1000, c('mux2','muy2')],
sigma = diag(omega_draws[1000, c('phix1', 'phiy1') ]) ) )
omega_draws[900:1000, c('mux2','muy2')]
q.samp <- cbind(data.grid, prob = mvtnorm::dmvnorm(data.grid,
mean = omega_draws[1000, c('mux2','muy2')],
sigma = diag(omega_draws[1000, c('phix1', 'phiy1') ]) ) )
contour(data.grid$x,data.grid$y, q.samp )
contour(data.grid, z=q.samp )
ggplot2::geom_contour(data=q.samp, x=x, y=y, z=prob )
q.samp <- cbind(data.grid, prob = mvtnorm::dmvnorm(data.grid,
mean = omega_draws[1000, c('mux2','muy2')],
sigma = diag(omega_draws[1000, c('phix1', 'phiy1') ]) ) )
View(q.samp)
View(q.samp)
ggplot2::geom_contour(data=q.samp, aes(x=x, y=y, z=prob) )
ggplot2::geom_contour(data=q.samp, ggplot2::aes(x=x, y=y, z=prob) )
ggplot2::ggplot() +
ggplot2::geom_contour(data=q.samp, ggplot2::aes(x=x, y=y, z=prob) )
ggplot2::ggplot() +
geom_points(aes(x=x, y=y))
ggplot2::ggplot() +
geom_point(aes(x=x, y=y)) +
ggplot2::geom_contour(data=q.samp, ggplot2::aes(x=x, y=y, z=prob) )
ggplot2::ggplot() +
ggplot2::geom_point(ggplot2::aes(x=x, y=y)) +
ggplot2::geom_contour(data=q.samp, ggplot2::aes(x=x, y=y, z=prob) )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[j], mu1, phi1)#*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[j], mu1, phi1)#*p + dmv(x[i], y[i], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm(mu1 = omega_draws[1000, c('mux1', 'muy1')] ,
mu2 =  omega_draws[1000, c('mux2','muy2')],
phi1 = omega_draws[1000, c('phix1', 'phiy1') ] ,
phi2 = omega_draws[1000, c('phix2', 'phiy2') ],
p = omega_draws[1000, c('p') ], add=F )
plot(x, y, pch=20)
plot_bnorm(mu1 = omega_draws[1000, c('mux1', 'muy1')] ,
mu2 =  omega_draws[1000, c('mux2','muy2')],
phi1 = omega_draws[1000, c('phix1', 'phiy1') ] ,
phi2 = omega_draws[1000, c('phix2', 'phiy2') ],
p = omega_draws[1000, c('p') ], add=T )
plot(x, y, pch=20, ylim=c(0, 6), xlim=c(30, 100))
plot_bnorm(mu1 = omega_draws[1000, c('mux1', 'muy1')] ,
mu2 =  omega_draws[1000, c('mux2','muy2')],
phi1 = omega_draws[1000, c('phix1', 'phiy1') ] ,
phi2 = omega_draws[1000, c('phix2', 'phiy2') ],
p = omega_draws[1000, c('p') ], add=T )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[j], mu1, phi1)*p + dmv(x[i], y[j], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot(x, y, pch=20, ylim=c(0, 6), xlim=c(30, 100))
plot_bnorm(mu1 = omega_draws[1000, c('mux1', 'muy1')] ,
mu2 =  omega_draws[1000, c('mux2','muy2')],
phi1 = omega_draws[1000, c('phix1', 'phiy1') ] ,
phi2 = omega_draws[1000, c('phix2', 'phiy2') ],
p = omega_draws[1000, c('p') ], add=T )
plot_bnorm(mu1 = omega_draws[1000, c('mux1', 'muy1')] ,
mu2 =  omega_draws[1000, c('mux2','muy2')],
phi1 = omega_draws[1000, c('phix1', 'phiy1') ] ,
phi2 = omega_draws[1000, c('phix2', 'phiy2') ],
p = omega_draws[1000, c('p') ], add=T, col='red' )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,5, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[j], mu1, phi1)*p + dmv(x[i], y[j], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, nlevels = 50, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
plot(x, y, pch=20, ylim=c(0, 6), xlim=c(30, 100))
plot_bnorm(mu1 = omega_draws[1000, c('mux1', 'muy1')] ,
mu2 =  omega_draws[1000, c('mux2','muy2')],
phi1 = omega_draws[1000, c('phix1', 'phiy1') ] ,
phi2 = omega_draws[1000, c('phix2', 'phiy2') ],
p = omega_draws[1000, c('p') ], add=T, col='red' )
plot_bnorm = function(mu1, mu2, phi1, phi2, p, add=F, col='black'){
x = seq(30,100, length.out=50)
y = seq(0,6, length.out=50)
dmv = function(xi, yi, mu, phi){
yy = c(xi, yi)
Sigma = diag(phi)
eval = dmvn(yy, mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(x), ncol=length(y))
for(i in 1:length(x) ){
for(j in 1:length(y) ){
density_mat[i, j] = dmv(x[i], y[j], mu1, phi1)*p + dmv(x[i], y[j], mu2, phi2)*(1-p)
}
}
contour(x, y, density_mat, nlevels = 50, add = add, col=col,
xlab=TeX("$x$"), ylab=TeX("$y$"),
main='Bivariate Normal Countours' )
return()
}
colMeans(omega_draws)
plot(x, y, pch=20, ylim=c(0, 6), xlim=c(30, 100))
plot_bnorm(mu1 = omega_draws[1000, c('mux1', 'muy1')] ,
mu2 =  omega_draws[1000, c('mux2','muy2')],
phi1 = omega_draws[1000, c('phix1', 'phiy1') ] ,
phi2 = omega_draws[1000, c('phix2', 'phiy2') ],
p = omega_draws[1000, c('p') ], add=T, col='red' )
LaplacesDemon::logit(rnorm(1000))
LaplacesDemon::inv_logit(rnorm(1000))
LaplacesDemon::logit(runif(1000))
?rnbinom
log(100000)
library(rstan)
library(latex2exp)
setwd("~/google_drive/Teaching/PHP_2530/Spring_2024/LectureSlides/Lecture20/code/")
library(rstan)
library(latex2exp)
setwd("~/google_drive/Teaching/PHP_2530/Spring_2024/LectureSlides/Lecture20/code/")
###--- Simulate Some Data ---###
set.seed(1)
n = 300
x = rbinom(n, 1, .5)
y = log(rnorm(n, 1 - 1*x, 1))
y = exp(rnorm(n, 1 - 1*x, 1))
hist(y)
summary(y)
m = ifelse(y<1)
m = ifelse(y<1, 0, 1)
y[m==0] = NA
### --- Create Stan Data --- ###
y_obs = y[m==1]
x_obs = x[m==1]
x_miss = x[m==0]
n_obs = sum(m)
n_miss = n - n_obs
stan_data = list(n=n, n_obs=n_obs, n_miss = n_miss,
x_obs=x_obs, x_miss=x_miss, y_obs=y_obs)
### --- Load Stan Models for Different Missingness Mechnanisms --- ###
## P(M=1 | x, y) = exp(eps0 + eps1*x + eps2*y)
mar_mod = stan_model("censor_mod.stan") ## eps2 ~ delta0
setwd("~/google_drive/Teaching/PHP_2530/Spring_2024/LectureSlides/Lecture20/code/")
### --- Load Stan Models for Different Missingness Mechnanisms --- ###
## P(M=1 | x, y) = exp(eps0 + eps1*x + eps2*y)
mar_mod = stan_model("censor_mod.stan") ## eps2 ~ delta0
### --- Load Stan Models for Different Missingness Mechnanisms --- ###
## P(M=1 | x, y) = exp(eps0 + eps1*x + eps2*y)
censor_mod = stan_model("censor_mod.stan") ## eps2 ~ delta0
res_cen = sampling(censor_mod, seed=1,
data = stan_data, chains = 1, iter = 10000, warmup = 5000)
stan_data = list(n=n, n_obs=n_obs, n_miss = n_miss,
x_obs=x_obs, x_miss=x_miss, y_obs=y_obs,
limit = 1)
res_cen = sampling(censor_mod, seed=1,
data = stan_data, chains = 1, iter = 10000, warmup = 5000)
eta1_cen = extract(res_cen, pars='eta1')$eta1
### --- Load Stan Models for Different Missingness Mechnanisms --- ###
## P(M=1 | x, y) = exp(eps0 + eps1*x + eps2*y)
censor_mod = stan_model("censor_mod.stan") ## eps2 ~ delta0
res_cen = sampling(censor_mod, seed=1,
data = stan_data, chains = 1, iter = 10000, warmup = 5000)
summary(res_cen, pars=c('eta1','exp_eta1'))
summary(res_cen)
summary(res_cen, pars=c('phi','eta0','eta1','exp_eta1'))
y_obs
sum(m)
